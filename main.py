import os, random, time, asyncio
from threading import Thread
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = "7907591643:AAHzqBkgdUiCDaKRBO4_xGRzYhF56325Gi4"
URL = os.environ.get("WEBHOOK_URL", "https://sinklit-bot.onrender.com")

app = Flask(__name__)

bot = Bot(token=TOKEN)
application = ApplicationBuilder().token(TOKEN).build()

user_timers = {}

loot_items = [
    {
        "name": "–£—Ç–∫–∞ –¢–∞–¥–º–∞–≤—Ä–∏—ç–ª—å",
        "rarity": "üîµ",
        "photo_path": "IMG_3704.jpeg",  # —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å main.py
        "description": "–£—Ç–∫–∞ –¢–∞–¥–º–∞–≤—Ä–∏—ç–ª—å\n–†–µ–¥–∫–æ—Å—Ç—å: üîµ\n1/10"
    }
]

rarity_chances = {"üü¢": 60, "üîµ": 25, "üî¥": 15}

def get_random_rarity():
    roll = random.randint(1,100)
    cum = 0
    for r, ch in rarity_chances.items():
        cum += ch
        if roll <= cum:
            return r
    return "üü¢"

def get_random_loot():
    rarity = get_random_rarity()
    filtered = [i for i in loot_items if i["rarity"] == rarity]
    return random.choice(filtered) if filtered else None

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.first_name
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        "–ù–∞–ø–∏—à–∏ ü¶Ü <b>–∫—Ä—è</b>, —á—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –∏—Å–∫–∞—Ç—å —É—Ç–∫—É!",
        parse_mode="HTML"
    )

async def handle_krya(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = time.time()

    if user_id not in user_timers or now >= user_timers[user_id]['end']:
        duration = random.randint(600,3600)
        user_timers[user_id] = {'end': now + duration}
        minutes = duration // 60
        await update.message.reply_text(
            f"üîç –ù–∞—á–∏–Ω–∞—é –∏—Å–∫–∞—Ç—å —É—Ç–∫—É!\n"
            f"‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ <b>{minutes} –º–∏–Ω—É—Ç(—ã)</b>.\n"
            "–ü–æ—Ç–µ—Ä–ø–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å —É—Ç–∫–æ–π! ü¶Ü",
            parse_mode="HTML"
        )
    else:
        remaining = int(user_timers[user_id]['end'] - now)
        if remaining <= 0:
            loot = get_random_loot()
            if loot:
                with open(loot["photo_path"], 'rb') as photo:
                    await update.message.reply_photo(photo=photo, caption=loot["description"])
            else:
                await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É—Ç–∫–∞ –Ω–µ –Ω–∞—à–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. ü¶Ü")
            duration = random.randint(600,3600)
            user_timers[user_id]['end'] = now + duration
        else:
            minutes = remaining // 60
            seconds = remaining % 60
            await update.message.reply_text(
                f"üôà –Ø –≤—Å—ë –µ—â—ë –∏—â—É —É—Ç–∫—É!\n"
                f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: <b>{minutes} –º–∏–Ω {seconds} —Å–µ–∫</b>\n"
                "–ü–æ—Ç–µ—Ä–ø–∏ –Ω–µ–º–Ω–æ–≥–æ... ü¶Üüîç",
                parse_mode="HTML"
            )

@app.route('/', methods=['GET'])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!"

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    asyncio.run(application.process_update(update))
    return "ok"

def run():
    port = int(os.environ.get("PORT", "8080"))
    app.run(host='0.0.0.0', port=port)

def main():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r"(?i)^–∫—Ä—è$"), handle_krya))

    # –∑–∞–ø—É—Å–∫–∞–µ–º Flask
    Thread(target=run).start()

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(bot.set_webhook(f"{URL}/{TOKEN}"))
    asyncio.run(application.initialize())

    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

    # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ main
    while True:
        time.sleep(10)

if __name__ == "__main__":
    main()

