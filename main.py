import os
import random
import time
import asyncio
from threading import Thread
from flask import Flask, request

from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7907591643:AAHzqBkgdUiCDaKRBO4_xGRzYhF56325Gi4"
URL = "https://sinklit-bot.onrender.com"  # –£–∫–∞–∂–∏ —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π URL Render –∏–ª–∏ –≥–¥–µ —Ö–æ—Å—Ç–∏—à—å

app = Flask(__name__)
bot = Bot(token=TOKEN)
application = ApplicationBuilder().token(TOKEN).build()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_timers = {}

# –°–ø–∏—Å–æ–∫ –ª—É—Ç–∞ (–ø—Ä–∏–º–µ—Ä)
loot_items = [
    {
        "name": "–£—Ç–∫–∞ –¢–∞–¥–º–∞–≤—Ä–∏—ç–ª—å",
        "rarity": "üîµ",
        "photo_path": "IMG_3704.jpeg",
        "description": "–£—Ç–∫–∞ –¢–∞–¥–º–∞–≤—Ä–∏—ç–ª—å\n–†–µ–¥–∫–æ—Å—Ç—å: üîµ\n1/10"
    },
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —É—Ç–∫–∏ —Å —Ä–∞–∑–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é –∏ —Ñ–æ—Ç–æ
]

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
rarity_chances = {"üü¢": 60, "üîµ": 25, "üî¥": 15}

def get_random_rarity():
    roll = random.randint(1, 100)
    cumulative = 0
    for rarity, chance in rarity_chances.items():
        cumulative += chance
        if roll <= cumulative:
            return rarity
    return "üü¢"

def get_random_loot():
    rarity = get_random_rarity()
    filtered = [item for item in loot_items if item["rarity"] == rarity]
    if not filtered:
        return None
    return random.choice(filtered)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.first_name
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n–ù–∞–ø–∏—à–∏ '–∫—Ä—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å —É—Ç–∫—É!"
    )

async def handle_krya(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = time.time()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ç–∞–π–º–µ—Ä–∞—Ö –∏–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
    if user_id not in user_timers or now >= user_timers[user_id]['end']:
        duration = random.randint(600, 3600)  # –æ—Ç 10 –º–∏–Ω—É—Ç –¥–æ 1 —á–∞—Å–∞
        user_timers[user_id] = {'end': now + duration}
        minutes = duration // 60
        await update.message.reply_text(
            f"üîç –ù–∞—á–∏–Ω–∞—é –∏—Å–∫–∞—Ç—å —É—Ç–∫—É!\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {minutes} –º–∏–Ω—É—Ç(—ã). –ü–æ—Ç–µ—Ä–ø–∏ –Ω–µ–º–Ω–æ–≥–æ..."
        )
        return

    # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å
    remaining = int(user_timers[user_id]['end'] - now)
    if remaining <= 0:
        # –¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî –≤—ã–¥–∞—ë–º —É—Ç–∫—É
        loot = get_random_loot()
        if loot:
            try:
                with open(loot["photo_path"], 'rb') as photo:
                    await update.message.reply_photo(photo=photo, caption=loot["description"])
            except Exception:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
                await update.message.reply_text(f"–í–æ—Ç —Ç–≤–æ—è —É—Ç–∫–∞:\n{loot['description']}")
        else:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É—Ç–∫–∞ –Ω–µ –Ω–∞—à–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏
        duration = random.randint(600, 3600)
        user_timers[user_id]['end'] = now + duration
    else:
        minutes = remaining // 60
        seconds = remaining % 60
        await update.message.reply_text(
            f"üôà –Ø –≤—Å—ë –µ—â—ë –∏—â—É —É—Ç–∫—É!\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {minutes} –º–∏–Ω {seconds} —Å–µ–∫."
        )

# === Flask —Å–µ—Ä–≤–µ—Ä ===

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!"

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    json_update = request.get_json(force=True)
    update = Update.de_json(json_update, bot)

    loop = asyncio.get_event_loop()
    future = asyncio.run_coroutine_threadsafe(application.process_update(update), loop)
    try:
        future.result(timeout=10)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")

    return "ok"

# === –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

def keep_alive():
    thread = Thread(target=run_flask)
    thread.start()

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ===

def main():
    keep_alive()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"(?i)^–∫—Ä—è$"), handle_krya))

    loop = asyncio.get_event_loop()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    loop.run_until_complete(application.initialize())
    loop.run_until_complete(application.start())
    loop.run_until_complete(bot.set_webhook(f"{URL}/{TOKEN}"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    # Flask —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º main –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    main()


